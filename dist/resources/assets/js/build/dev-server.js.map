{"version":3,"sources":["../../../../../resources/assets/js/build/dev-server.js"],"names":["require","config","process","env","NODE_ENV","JSON","parse","dev","opn","path","express","webpack","proxyMiddleware","webpackConfig","port","PORT","autoOpenBrowser","proxyTable","app","compiler","devMiddleware","publicPath","output","quiet","hotMiddleware","log","plugin","compilation","data","cb","publish","action","forEach","context","options","target","use","filter","staticPath","posix","join","assetsPublicPath","assetsSubDirectory","static","uri","_resolve","readyPromise","resolve","console","waitUntilValid","server","listen","module","exports","ready","close"],"mappings":"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","file":"dev-server.js","sourcesContent":["require('./check-versions')()\n\nvar config = require('../config')\nif (!process.env.NODE_ENV) {\n  process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV)\n}\n\nvar opn = require('opn')\nvar path = require('path')\nvar express = require('express')\nvar webpack = require('webpack')\nvar proxyMiddleware = require('http-proxy-middleware')\nvar webpackConfig = process.env.NODE_ENV === 'testing'\n  ? require('./webpack.prod.conf')\n  : require('./webpack.dev.conf')\n\n// default port where dev server listens for incoming traffic\nvar port = process.env.PORT || config.dev.port\n// automatically open browser, if not set will be false\nvar autoOpenBrowser = !!config.dev.autoOpenBrowser\n// Define HTTP proxies to your custom API backend\n// https://github.com/chimurai/http-proxy-middleware\nvar proxyTable = config.dev.proxyTable\n\nvar app = express()\nvar compiler = webpack(webpackConfig)\n\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\n  publicPath: webpackConfig.output.publicPath,\n  quiet: true\n})\n\nvar hotMiddleware = require('webpack-hot-middleware')(compiler, {\n  log: () => {}\n})\n// force page reload when html-webpack-plugin template changes\ncompiler.plugin('compilation', function (compilation) {\n  compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {\n    hotMiddleware.publish({action: 'reload'})\n    cb()\n  })\n})\n\n// proxy api requests\nObject.keys(proxyTable).forEach(function (context) {\n  var options = proxyTable[context]\n  if (typeof options === 'string') {\n    options = {target: options}\n  }\n  app.use(proxyMiddleware(options.filter || context, options))\n})\n\n// handle fallback for HTML5 history API\napp.use(require('connect-history-api-fallback')())\n\n// serve webpack bundle output\napp.use(devMiddleware)\n\n// enable hot-reload and state-preserving\n// compilation error display\napp.use(hotMiddleware)\n\n// serve pure static assets\nvar staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)\napp.use(staticPath, express.static('./static'))\n\nvar uri = 'http://localhost:' + port\n\nvar _resolve\nvar readyPromise = new Promise(resolve => {\n  _resolve = resolve\n})\n\nconsole.log('> Starting dev server...')\ndevMiddleware.waitUntilValid(() => {\n  console.log('> Listening at ' + uri + '\\n')\n  // when env is testing, don't need open it\n  if (autoOpenBrowser && process.env.NODE_ENV !== 'testing') {\n    opn(uri, {app: 'google chrome'})\n  }\n  _resolve()\n})\n\nvar server = app.listen(port)\n\nmodule.exports = {\n  ready: readyPromise,\n  close: () => {\n    server.close()\n  }\n}\n"]}